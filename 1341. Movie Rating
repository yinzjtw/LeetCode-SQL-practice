##### Description #####
Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.
 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
 

Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 

Write a solution to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.

##### Write MySQL query statement below #####

(select users.name as results from users
right join MovieRating on users.user_id = MovieRating.user_id
group by users.user_id
order by count(users.user_id) desc, users.name asc
limit 1)

union all

(select Movies.title as results from Movies
right join MovieRating on Movies.movie_id = MovieRating.movie_id
where MovieRating.created_at between '2020-02-01' and '2020-02-29'
group by MovieRating.movie_id
order by sum(MovieRating.rating)/count(MovieRating.rating) desc, 
        Movies.title asc
limit 1);
